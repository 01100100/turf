"use strict";Object.defineProperty(exports,"__esModule",{value:true});function feature(geometry,properties,bbox,id){if(geometry===undefined)throw new Error("geometry is required");if(properties&&properties.constructor!==Object)throw new Error("properties must be an Object");if(bbox&&bbox.length!==4)throw new Error("bbox must be an Array of 4 numbers");if(id&&["string","number"].indexOf(typeof id)===-1)throw new Error("id must be a number or a string");var feat={type:"Feature"};if(id)feat.id=id;if(bbox)feat.bbox=bbox;feat.properties=properties||{};feat.geometry=geometry;return feat}function geometry(type,coordinates,bbox){if(!type)throw new Error("type is required");if(!coordinates)throw new Error("coordinates is required");if(!Array.isArray(coordinates))throw new Error("coordinates must be an Array");if(bbox&&bbox.length!==4)throw new Error("bbox must be an Array of 4 numbers");var geom;switch(type){case"Point":geom=point(coordinates).geometry;break;case"LineString":geom=lineString(coordinates).geometry;break;case"Polygon":geom=polygon(coordinates).geometry;break;case"MultiPoint":geom=multiPoint(coordinates).geometry;break;case"MultiLineString":geom=multiLineString(coordinates).geometry;break;case"MultiPolygon":geom=multiPolygon(coordinates).geometry;break;default:throw new Error(type+" is invalid")}if(bbox)geom.bbox=bbox;return geom}function point(coordinates,properties,bbox,id){if(!coordinates)throw new Error("No coordinates passed");if(coordinates.length===undefined)throw new Error("Coordinates must be an array");if(coordinates.length<2)throw new Error("Coordinates must be at least 2 numbers long");if(!isNumber(coordinates[0])||!isNumber(coordinates[1]))throw new Error("Coordinates must contain numbers");return feature({type:"Point",coordinates:coordinates},properties,bbox,id)}function polygon(coordinates,properties,bbox,id){if(!coordinates)throw new Error("No coordinates passed");for(var i=0;i<coordinates.length;i++){var ring=coordinates[i];if(ring.length<4){throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.")}for(var j=0;j<ring[ring.length-1].length;j++){if(i===0&&j===0&&!isNumber(ring[0][0])||!isNumber(ring[0][1]))throw new Error("Coordinates must contain numbers");if(ring[ring.length-1][j]!==ring[0][j]){throw new Error("First and last Position are not equivalent.")}}}return feature({type:"Polygon",coordinates:coordinates},properties,bbox,id)}function lineString(coordinates,properties,bbox,id){if(!coordinates)throw new Error("No coordinates passed");if(coordinates.length<2)throw new Error("Coordinates must be an array of two or more positions");if(!isNumber(coordinates[0][1])||!isNumber(coordinates[0][1]))throw new Error("Coordinates must contain numbers");return feature({type:"LineString",coordinates:coordinates},properties,bbox,id)}function featureCollection(features,bbox,id){if(!features)throw new Error("No features passed");if(!Array.isArray(features))throw new Error("features must be an Array");if(bbox&&bbox.length!==4)throw new Error("bbox must be an Array of 4 numbers");if(id&&["string","number"].indexOf(typeof id)===-1)throw new Error("id must be a number or a string");var fc={type:"FeatureCollection"};if(id)fc.id=id;if(bbox)fc.bbox=bbox;fc.features=features;return fc}function multiLineString(coordinates,properties,bbox,id){if(!coordinates)throw new Error("No coordinates passed");return feature({type:"MultiLineString",coordinates:coordinates},properties,bbox,id)}function multiPoint(coordinates,properties,bbox,id){if(!coordinates)throw new Error("No coordinates passed");return feature({type:"MultiPoint",coordinates:coordinates},properties,bbox,id)}function multiPolygon(coordinates,properties,bbox,id){if(!coordinates)throw new Error("No coordinates passed");return feature({type:"MultiPolygon",coordinates:coordinates},properties,bbox,id)}function geometryCollection(geometries,properties,bbox,id){if(!geometries)throw new Error("geometries is required");if(!Array.isArray(geometries))throw new Error("geometries must be an Array");return feature({type:"GeometryCollection",geometries:geometries},properties,bbox,id)}var factors={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,centimeters:6373e5,centimetres:6373e5,kilometers:6373,kilometres:6373,feet:20908792.65};var areaFactors={kilometers:1e-6,kilometres:1e-6,meters:1,metres:1,centimetres:1e4,millimeter:1e6,acres:247105e-9,miles:3.86e-7,yards:1.195990046,feet:10.763910417,inches:1550.003100006};function round(num,precision){if(num===undefined||num===null||isNaN(num))throw new Error("num is required");if(precision&&!(precision>=0))throw new Error("precision must be a positive number");var multiplier=Math.pow(10,precision||0);return Math.round(num*multiplier)/multiplier}function radiansToDistance(radians,units){if(radians===undefined||radians===null)throw new Error("radians is required");if(units&&typeof units!=="string")throw new Error("units must be a string");var factor=factors[units||"kilometers"];if(!factor)throw new Error(units+" units is invalid");return radians*factor}function distanceToRadians(distance,units){if(distance===undefined||distance===null)throw new Error("distance is required");if(units&&typeof units!=="string")throw new Error("units must be a string");var factor=factors[units||"kilometers"];if(!factor)throw new Error(units+" units is invalid");return distance/factor}function distanceToDegrees(distance,units){return radians2degrees(distanceToRadians(distance,units))}function bearingToAngle(bearing){if(bearing===null||bearing===undefined)throw new Error("bearing is required");var angle=bearing%360;if(angle<0)angle+=360;return angle}function radians2degrees(radians){if(radians===null||radians===undefined)throw new Error("radians is required");var degrees=radians%(2*Math.PI);return degrees*180/Math.PI}function degrees2radians(degrees){if(degrees===null||degrees===undefined)throw new Error("degrees is required");var radians=degrees%360;return radians*Math.PI/180}function convertDistance(distance,originalUnit,finalUnit){if(distance===null||distance===undefined)throw new Error("distance is required");if(!(distance>=0))throw new Error("distance must be a positive number");var convertedDistance=radiansToDistance(distanceToRadians(distance,originalUnit),finalUnit||"kilometers");return convertedDistance}function convertArea(area,originalUnit,finalUnit){if(area===null||area===undefined)throw new Error("area is required");if(!(area>=0))throw new Error("area must be a positive number");var startFactor=areaFactors[originalUnit||"meters"];if(!startFactor)throw new Error("invalid original units");var finalFactor=areaFactors[finalUnit||"kilometers"];if(!finalFactor)throw new Error("invalid final units");return area/startFactor*finalFactor}function isNumber(num){return!isNaN(num)&&num!==null&&!Array.isArray(num)}function isObject(input){return!!input&&input.constructor===Object}var earthRadius=6371008.8;exports.feature=feature;exports.geometry=geometry;exports.point=point;exports.polygon=polygon;exports.lineString=lineString;exports.featureCollection=featureCollection;exports.multiLineString=multiLineString;exports.multiPoint=multiPoint;exports.multiPolygon=multiPolygon;exports.geometryCollection=geometryCollection;exports.round=round;exports.radiansToDistance=radiansToDistance;exports.distanceToRadians=distanceToRadians;exports.distanceToDegrees=distanceToDegrees;exports.bearingToAngle=bearingToAngle;exports.radians2degrees=radians2degrees;exports.degrees2radians=degrees2radians;exports.convertDistance=convertDistance;exports.convertArea=convertArea;exports.isNumber=isNumber;exports.isObject=isObject;exports.earthRadius=earthRadius;